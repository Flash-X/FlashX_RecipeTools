
#:if 0
 *************************************************************************
  File:       Simulation.fypp, generated by setup script
  Contains:   problem dependent parameters.

  Example:    When the setup script parses the Config files it
              counts up the number of declared grid variables.  It records 
              the final number in this file.  It also defines the indices 
              at which the vars are located.

              In other cases, some parameters need to be specified at 
              compile time.
              If a grid with a fixed block size is used (Paramesh or fixed 
              block size Uniform Grid) MAXBLOCKS, NXB, NYB, NZB, NGUARD etc 
              are defined in this Simulation.fypp file so they can be used at 
              compile time.

  Note:       parameters which can be computed from other parameters. These 
              computations are now performed at the Simulation.fypp level and not by 
              the setup script. The big advantage to this is that one can 
              tweak some entries of Simulation.fypp and dependent quantities get 
              changed appropriately

              If you have some parameter computed from others enclose the 
              computation in parenthesis
              
              #define NEW (OLD + 5) and not #define NEW OLD + 5

              Even though both are valid syntax the second can produce 
              unexpected results. e.g. suppose OLD=2, then NEW*6 will 
              evaluate to 42 in the first case and 32 in the second
              
  Postscript: Since this header file is to be used with C, F77 and F90 
              there are lot of nice things we cannot do. 

              (1) No indendation since F77 will choke (so inner ifdef will 
                  not be indented)
              (2) All Comments will have to be in (#if 0,stuff, #endif ) 
                  construct. C, F77 and F90 do not agree on a common comment 
                  character
              (3) Hence this file is sprinkled with comments indicating 
                  start and finish of major ifdef statements

  !!!!Do not edit!  See problem config files or modify setup options to 
      change simulation parameters!!!!
  *********************************************************************
#:endif

#:set CONSTANT_ZERO=(0)
#:set CONSTANT_ONE =(1)
#:set CONSTANT_TWO =(2)

#:if 0
  **************************************************************************
  The #define definitions below indicate the index at which a grid scope 
  variable is located in the 'unk' (unknowns) data structure.  Property 
  variables are denoted with '_VAR' following the variable name.  Species 
  are also stored in the unk datastructure.  They are
  denoted with '_SPEC' following the species name.

  NPROP_VARS = the total number of grid property variables in the simulation
               (ie those ending in _VAR)
  NEVOL_VARS = total number of evolved variables for TimeAdvance=MoL; these
               are a subset (and at the start of) the property variables
  NSPECIES = the number of species in the simulation 
             (ie those ending in _SPEC)
  NMASS_SCALARS = the number of mass scalars in a simulation
  NMASS_SCALAR_GROUPS = # of groups mass scalars to be renormed are split into
  NUNK_VARS = NPROP_VARS + NSPECIES + NMASS_SCALARS
  SPECIES_BEGIN = the index at which the first species is stored in the 
                  unk data structure
  SPECIES_BEGIN = NPROP_VARS + 1
  **************************************************************************
#:endif

#:set PROP_VARS_BEGIN=CONSTANT_ONE
#:set UNK_VARS_BEGIN=(PROP_VARS_BEGIN)

#:set DENS_VAR=1
#:set VELX_VAR=2
#:set VELY_VAR=3
#:set VELZ_VAR=4
#:set PRES_VAR=5
#:set ENER_VAR=6
#:set TEMP_VAR=7
#:set EINT_VAR=8
#:set GAMC_VAR=9
#:set GAME_VAR=10
#:set DENA_VAR=11
#:set EINA_VAR=12
#:set ENRA_VAR=13
#:set PRSA_VAR=14
#:set SHOK_VAR=15
#:set VLXA_VAR=16
#:set VLYA_VAR=17
#:set VLZA_VAR=18

#:set NPROP_VARS=18
#:set PROP_VARS_END=(PROP_VARS_BEGIN + NPROP_VARS - CONSTANT_ONE)

#:set NEVOL_VARS=0
#:set EVOL_VARS_BEGIN=(PROP_VARS_BEGIN)
#:set EVOL_VARS_END=(EVOL_VARS_BEGIN + NEVOL_VARS - CONSTANT_ONE)

#:set SPECIES_BEGIN=(PROP_VARS_END + CONSTANT_ONE)




#:set NSPECIES=0
#:set SPECIES_END=(SPECIES_BEGIN + NSPECIES - CONSTANT_ONE)

#:set MASS_SCALARS_BEGIN=(SPECIES_END + CONSTANT_ONE)



#:set NMASS_SCALARS=0
#:set MASS_SCALARS_END=(MASS_SCALARS_BEGIN+NMASS_SCALARS-CONSTANT_ONE)

#:set NMASS_SCALAR_GROUPS=0 

#:set NUNK_VARS=(NPROP_VARS + NSPECIES + NMASS_SCALARS)
#:set UNK_VARS_END=(UNK_VARS_BEGIN - CONSTANT_ONE + NUNK_VARS)

#:if 0
  ************************************************************************
  The #define definitions below indicate the index at which a grid scope 
  FACE variable is located in the facevars data structure.  
  ************************************************************************
#:endif



#:set NFACE_VARS=0

#:if 0
  ************************************************************************
  The #define definitions below indicate the index at which a flux 
  variable is located in the flux data structure (data structure can vary 
  depending on grid).
  Property fluxes are denoted with '_FLUX' following the variable name.
  Flux Species are also stored in the flux datastructure.  

  NPROP_FLUX = the total number of grid property variables in the 
                 simulation (ie those ending in _FLUX)
  NSPECIES_FLUX = the number of flux species in the simulation
  NMASS_SCALARS_FLUX = flux mass scalars

  NFLUXES = NPROP_FLUX + NSPECIES_FLUX + NMASS_SCALARS_FLUX
  ************************************************************************
#:endif

#:set F01DENS_FLUX=1
#:set F02XMOM_FLUX=2
#:set F03YMOM_FLUX=3
#:set F04ZMOM_FLUX=4
#:set F05ENER_FLUX=5

#:set NPROP_FLUX=5
#:set NSPECIES_FLUX=0
#:set NMASS_SCALARS_FLUX=0
#:set NFLUXES=(NPROP_FLUX + NSPECIES_FLUX + NMASS_SCALARS_FLUX)

#:set PROP_FLUX_BEGIN=CONSTANT_ONE
#:set FLUXES_BEGIN=(PROP_FLUX_BEGIN)

#:set PROP_FLUX_END=(PROP_FLUX_BEGIN + NPROP_FLUX - CONSTANT_ONE)
#:set SPECIES_FLUX_BEGIN=(PROP_FLUX_END + CONSTANT_ONE)
#:set SPECIES_FLUX_END=(SPECIES_FLUX_BEGIN + NSPECIES_FLUX - CONSTANT_ONE)
#:set MASS_SCALARS_FLUX_BEGIN=(SPECIES_FLUX_END + CONSTANT_ONE)
#:set MASS_SCALARS_FLUX_END=(MASS_SCALARS_FLUX_BEGIN + NMASS_SCALARS_FLUX - CONSTANT_ONE)
#:set NVARS_TOTAL=(NUNK_VARS + (NFACE_VARS * 3) + NFLUXES)

#:if 0
  ************************************************************************
  The #define definitions below pertain to particles.
  The particles data structure  needs to be defined at compile time and thus
  the number of particle properties (such as, velocity, position etc)
  are recorded here.  For example, #define VELX_PART_PROP 2 indicates that
  x velocity of a particle is stored in the second position in the particles
  array.

  Since FLASH3 all particle properties are reals.
  If particles are not being used in a simulation then the number of
  particle properties = 0 (defined as NPART_PROPS)
  DEV: CD.  It is set to 1 and not 0 by the setup script.  I guess this is 
  to avoid zero sized arrays???
  ************************************************************************
#:endif



#:set PART_PROPS_BEGIN=CONSTANT_ONE
#:set NPART_PROPS=1
#:set PART_PROPS_END=(PART_PROPS_BEGIN + NPART_PROPS - CONSTANT_ONE)

#:if 0
  ************************************************************************
  The #define definitions below pertain to particles types.
  Particles can be of type passive, active, star, etc.....

  PASSIVE, if it exists, should always be the first type
  ************************************************************************
#:endif




#:set PART_TYPES_BEGIN=CONSTANT_ONE
#:set NPART_TYPES=0
#:set PART_TYPES_END=(PART_TYPES_BEGIN + NPART_TYPES - CONSTANT_ONE)
    
#:if 0
  ************************************************************************
  NDIM = number of dimensions in the simulation (or 2 if user did not 
  specify anything)
  MAXBLOCKS = maximum number of blocks allowed per processor

  ************************************************************************
#:endif

#:set NDIM=2
#:set MAXBLOCKS=1024


#:if 0
  ************************************************************************
  Definitions for scratch array.
  ************************************************************************
#:endif


#:set NSCRATCH_GRID_VARS=0
#:set SCRATCH_GRID_VARS_BEGIN=(CONSTANT_ONE)
#:set SCRATCH_GRID_VARS_END=(SCRATCH_GRID_VARS_BEGIN - CONSTANT_ONE + NSCRATCH_GRID_VARS)


#:if 0
  ************************************************************************
  Definitions for scratch_ctr array.
  ************************************************************************
#:endif


#:set NSCRATCH_CENTER_VARS=0
#:set SCRATCH_CENTER_VARS_BEGIN=(CONSTANT_ONE)
#:set SCRATCH_CENTER_VARS_END=(SCRATCH_CENTER_VARS_BEGIN - CONSTANT_ONE + NSCRATCH_CENTER_VARS)

#:set NMOL_RHS_VARS=0
#:set MOL_RHS_VARS_BEGIN=(SCRATCH_CENTER_VARS_BEGIN)
#:set MOL_RHS_VARS_END=(MOL_RHS_VARS_BEGIN + NMOL_RHS_VARS - CONSTANT_ONE)

#:set NMOL_INIT_VARS=0
#:set MOL_INIT_VARS_BEGIN=(MOL_RHS_VARS_END + CONSTANT_ONE)
#:set MOL_INIT_VARS_END=(MOL_INIT_VARS_BEGIN + NMOL_INIT_VARS - CONSTANT_ONE)

#:set NMOL_SCRATCH=0
#:set NMOL_SCRATCH_VARS=0
#:set MOL_SCRATCH_VARS_BEGIN=(MOL_INIT_VARS_END + CONSTANT_ONE)
#:set MOL_SCRATCH_VARS_END=(MOL_SCRATCH_VARS_BEGIN + NMOL_SCRATCH_VARS - CONSTANT_ONE)


#:if 0
  ************************************************************************
  Definitions for scratch_facevarx array.
  ************************************************************************
#:endif


#:set NSCRATCH_FACEX_VARS=0
#:set SCRATCH_FACEX_VARS_BEGIN=(CONSTANT_ONE)
#:set SCRATCH_FACEX_VARS_END=(SCRATCH_FACEX_VARS_BEGIN - CONSTANT_ONE + NSCRATCH_FACEX_VARS)


#:if 0
  ************************************************************************
  Definitions for scratch_facevary array.
  ************************************************************************
#:endif


#:set NSCRATCH_FACEY_VARS=0
#:set SCRATCH_FACEY_VARS_BEGIN=(CONSTANT_ONE)
#:set SCRATCH_FACEY_VARS_END=(SCRATCH_FACEY_VARS_BEGIN - CONSTANT_ONE + NSCRATCH_FACEY_VARS)


#:if 0
  ************************************************************************
  Definitions for scratch_facevarz array.
  ************************************************************************
#:endif


#:set NSCRATCH_FACEZ_VARS=0
#:set SCRATCH_FACEZ_VARS_BEGIN=(CONSTANT_ONE)
#:set SCRATCH_FACEZ_VARS_END=(SCRATCH_FACEZ_VARS_BEGIN - CONSTANT_ONE + NSCRATCH_FACEZ_VARS)


#:set MAX_PLOT_VARS=18

#:if 0
  ************************************************************************
  The #define definitions below pertain simulations where a fixed block 
  size. mesh is used. 'Fixed block size' means that the size of the block 
  is specified at compile time rather than runtime.  It also means that 
  all the blocks in a simulation have the same number of zones per block 
  and the same number of guardcells.

  Paramesh and a fixed block size uniform grid run in this mode. 

  NXB (NYB, NZB) = the number of zones in the x(y,z) direction respectively
  NGUARD = the number of guardcells in the block.  In fixed block size 
           mode the x,y and z dimensions of the block all must have the 
           same number of guardcells.

  GRID_ILO_GC = the index of the first zone in block in the i dimension 
                including guardcells.  (Always = 1)
  GRID_IHI_GC = the index of the last zone in a block in the i dimension 
                including guardcells.
  If, NGUARD = 4 and NXB = 8 then GRID_IHI_GC = 16 (fortran counting)  
  GRID_ILO    = the index of the first interior (non guardcell) zone in 
                a block in the i dimension.
  If, NGUARD = 4 then GRID_ILO = 5  (fortran counting)
  GRID_IHI    = the index of the last interior zone in a block in the i 
                dimension.              
  If, NGUARD = 4 and NXB = 8 then GRID_IHI = 12 (fortran counting)
  ************************************************************************
#:endif


#:set K1D=CONSTANT_ONE

#:if NDIM > CONSTANT_ONE
#:set K2D=CONSTANT_ONE
#:else
#:set K2D=CONSTANT_ZERO
#:endif

#:if NDIM > CONSTANT_TWO
#:set K3D=CONSTANT_ONE
#:else
#:set K3D=CONSTANT_ZERO
#:endif

#:set NGUARD=6

#:if 0
  *************
  Grid geometry
  *************
#:endif
#:set GRID_GEOM_UNDEF
#:set GRID_CURVILINEAR=0

#:if GRID_CURVILINEAR == CONSTANT_ZERO
#:del GRID_CURVILINEAR
#:endif

#:if 0
  ************************************************************************
  FIXEDBLOCKSIZE is initially defined to be 0 or 1
  Soon FIXEDBLOCKSIZE is undefined if it was set to 0
  ************************************************************************
#:endif

#:set FIXEDBLOCKSIZE=1

#:if FIXEDBLOCKSIZE == CONSTANT_ZERO
#:del FIXEDBLOCKSIZE
#:endif

#:if defined('FIXEDBLOCKSIZE')

#:set NXB=16
#:set NYB=16
#:set NZB=1

#:set GRID_ILO_GC=CONSTANT_ONE
#:set GRID_JLO_GC=CONSTANT_ONE
#:set GRID_KLO_GC=CONSTANT_ONE
        
#:set GRID_IHI_GC=(NXB + CONSTANT_TWO*NGUARD*K1D)
#:set GRID_JHI_GC=(NYB + CONSTANT_TWO*NGUARD*K2D)
#:set GRID_KHI_GC=(NZB + CONSTANT_TWO*NGUARD*K3D)
        
#:set GRID_ILO=(NGUARD*K1D + CONSTANT_ONE)
#:set GRID_JLO=(NGUARD*K2D + CONSTANT_ONE)
#:set GRID_KLO=(NGUARD*K3D + CONSTANT_ONE)

#:set GRID_IHI=(NGUARD*K1D + NXB)
#:set GRID_JHI=(NGUARD*K2D + NYB)
#:set GRID_KHI=(NGUARD*K3D + NZB)


#:if 0
  ************************************************************************
  !!!DEV: MAXCELLS pertains to all simulations but someone else needs to 
     decide how this works with non fixed block size!

  It is the maxmimum of  GRID_{IJK}HI_GC. We compute the maximum using 
  preprocessor stuff
  ************************************************************************
#:endif

#:if GRID_IHI_GC > GRID_JHI_GC
#:set FLASHPP_MAX_IJ_TEMP=GRID_IHI_GC
#:else
#:set FLASHPP_MAX_IJ_TEMP=GRID_JHI_GC
#:endif

#:if FLASHPP_MAX_IJ_TEMP > GRID_KHI_GC
#:set MAXCELLS=FLASHPP_MAX_IJ_TEMP
#:else
#:set MAXCELLS=GRID_KHI_GC
#:endif

#:if 0
  ************************************************************************
  End of #ifdef FIXEDBLOCKSIZE follows
  ************************************************************************
#:endif
#:endif 

#:if 0
  ************************************************************************
  FL_NON_PERMANENT_GUARDCELLS is initially defined to be 0 or 1
  Soon FL_NON_PERMANENT_GUARDCELLS is undefined if it was set to 0
  ************************************************************************
#:endif

#:set FL_NON_PERMANENT_GUARDCELLS=0

#:if FL_NON_PERMANENT_GUARDCELLS == CONSTANT_ZERO
#:del FL_NON_PERMANENT_GUARDCELLS
#:endif

#:if 0
  ***************************************************************************
  The following set of #defines are specific to FLASH and picked up from 
  Config Files and default values in "globals.py". Some uses:
 
  * Allow code to determine which units have been compiled into the code. 
    In each Config file the unit can declare a Pre-processor symbol using 

    PPDEFINE fubar
    This gets translated to 
    #define fubar in Simulation.fypp

  * Some configuration of FLASH specific to a unit or simulation. For example,

    PPDEFINE FLASH_MHD_DIM 1
    becomes
    #define FLASH_MHD_DIM 1 in Simulation.fypp
    
  ***************************************************************************
#:endif

#:set FLASHX_ORCHESTRATION
#:set FLASHX_ORCHESTRATION_MILHOJA
#:set FLASH_EOS
#:set FLASH_EOS_GAMMA
#:set FLASH_GRID_MILHOJA
#:set FLASH_IO
#:set FLASH_IO_HDF5
#:set FLASH_SPARK_HYDRO
#:set FLASH_USE_MEMORYUSAGE
#:set GRID_USE_AMREX_BACKEND
#:set GR_LREFMAXTIMES=20
#:set IO_HDF5_SERIAL
#:set NSTENCIL=3
#:set ORCHESTRATION_OPENACC_OFFLOAD
#:set ORCHESTRATION_USE_GPUS

