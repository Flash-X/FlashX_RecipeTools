{
  "_param:orchestration_count": "",
  "_param:taskfunction_name": "",
  "_param:dataitem_name": "",
  "_connector:use_interface": {
    "_code": [
      "use Orchestration_interface, ONLY: Orchestration_setupPipelineForCpuTasks, &",
      "                                   Orchestration_pushTileToCpuPipeline",
      "use Orchestration_data, ONLY: or_nThreads_${orchestration_count}"
    ]
  },
  "_connector:execute": {
    "_code": [
      {
        "_link:init_dataitem": []
      },
      "",
      "call Timers_start(\"${taskfunction_name} setup\")",
      "call Orchestration_setupPipelineForCpuTasks( &",
      "   MH_taskFunction=${taskfunction_name}_Cpp2C, &",
      "   nThreads=or_nThreads_${orchestration_count} &",
      ")",
      "call Timers_stop(\"${taskfunction_name} setup\")",
      "call Grid_getTileIterator(itor, nodetype=LEAF, preComm=comm)",
      "call Timers_start(\"${taskfunction_name} iterate\")",
      "do while(itor%isValid())",
      "   call itor%currentTile(tileDesc)",
      "   call tileDesc%fillTileCInfo(cInfo)",
      "",
      "   call Orchestration_pushTileToCpuPipeline( &",
      "      prototype_Cptr=${dataitem_name}, &",
      "      nThreads=or_nThreads_${orchestration_count}, &",
      "      tileCInfo=cInfo &",
      "   )",
      "",
      "   call itor%next()",
      "end do",
      "call Timers_stop(\"${taskfunction_name} iterate\")",
      "call Grid_releaseTileIterator(itor)",
      "",
      "call Timers_start(\"${taskfunction_name} teardown\")",
      "call Orchestration_teardownPipeline(nThreads=or_nThreads_${orchestration_count})",
      "call Timers_stop(\"${taskfunction_name} teardown\")",
      "",
      {
        "_link:delete_dataitem": []
      }
    ]
  },
  "_param:__type__": ".f90"
}
